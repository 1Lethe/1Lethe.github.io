<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PA2-1-RTFSC理解NEMU指令执行过程</title>
    <link href="/2025/02/26/PA2-1-RTFSC%E7%90%86%E8%A7%A3NEMU%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/"/>
    <url>/2025/02/26/PA2-1-RTFSC%E7%90%86%E8%A7%A3NEMU%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>对NEMU如何执行一条指令的理解.</p><span id="more"></span><p>本文章为一生一芯教学项目的个人理解,本人并不能保证其正确,请注意<strong>学术诚信</strong></p><h2 id="0-主要的数据结构"><a href="#0-主要的数据结构" class="headerlink" title="0 主要的数据结构"></a>0 主要的数据结构</h2><p>注意：snpc和dnpc：  </p><ul><li>snpc: static next pc，二进制代码中的下一个pc  </li><li>dnpc：dynamic next pc，下一个程序执行的pc<br>例如，<br>100: jmp 102<br>101: add<br>102: xor<br>100 的 snpc 为 101，100 的 dnpc 为 102。<br>因此，我们在执行指令时应该使用dnpc来更新pc并维护dnpc。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><br>  <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Decode</span> &#123;</span><br>    <span class="hljs-type">vaddr_t</span> pc;<br>    <span class="hljs-type">vaddr_t</span> snpc; <span class="hljs-comment">// static next pc</span><br>    <span class="hljs-type">vaddr_t</span> dnpc; <span class="hljs-comment">// dynamic next pc</span><br>    ISADecodeInfo isa; <br>    IFDEF(CONFIG_ITRACE, <span class="hljs-type">char</span> logbuf[<span class="hljs-number">128</span>]);<br>&#125; Decode;<br></code></pre></td></tr></table></figure><h2 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1 初始化"></a>1 初始化</h2><p>更新pc与snpc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">s-&gt;pc = pc;<br>s-&gt;snpc = pc;<span class="hljs-comment">// update s-&gt;pc and s-&gt;snpc.</span><br>isa_exec_once(s); <span class="hljs-comment">// fetch and execute code s-&gt;pc and update s-&gt; dnpc.</span><br></code></pre></td></tr></table></figure><h2 id="2-取指"><a href="#2-取指" class="headerlink" title="2 取指"></a>2 取指</h2><p>NEMU在内存中读指令（4字节）并更新snpc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">s-&gt;isa.inst = inst_fetch(&amp;s-&gt;snpc, <span class="hljs-number">4</span>); <span class="hljs-comment">// fetch inst in mem (4 bytes) and update s-&gt;snpc.</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title function_">inst_fetch</span><span class="hljs-params">(<span class="hljs-type">vaddr_t</span> *pc, <span class="hljs-type">int</span> len)</span> &#123;<br>  <span class="hljs-type">uint32_t</span> inst = vaddr_ifetch(*pc, len);<br>  (*pc) += len;<br>  <span class="hljs-keyword">return</span> inst;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-译码"><a href="#3-译码" class="headerlink" title="3 译码"></a>3 译码</h2><p>NEMU通过模式匹配，匹配到指令结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* Here to decode */</span><br>INSTPAT_START();<br>INSTPAT(<span class="hljs-string">&quot;??????? ????? ????? ??? ????? 00101 11&quot;</span>, auipc  , U, R(rd) = s-&gt;pc + imm);<br>INSTPAT_END();<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> INSTPAT(pattern, ...) do &#123; \</span><br><span class="hljs-meta">  uint64_t key, mask, shift; \</span><br><span class="hljs-meta">  <span class="hljs-comment">/* Decode the pattern and get key code, mask and shift of the pattern. */</span></span><br>  pattern_decode(pattern, STRLEN(pattern), &amp;key, &amp;mask, &amp;shift); \<br>  <span class="hljs-comment">/* Get inst and if inst matches the pattern */</span><br>  <span class="hljs-keyword">if</span> ((((<span class="hljs-type">uint64_t</span>)INSTPAT_INST(s) &gt;&gt; shift) &amp; mask) == key) &#123; \<br>    INSTPAT_MATCH(s, ##__VA_ARGS__); \<br>    <span class="hljs-keyword">goto</span> *(__instpat_end); \<br>  &#125; \<br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="3-1-匹配模式过程"><a href="#3-1-匹配模式过程" class="headerlink" title="3.1 匹配模式过程"></a>3.1 匹配模式过程</h3><p><code>pattern_decode(pattern, STRLEN(pattern), &amp;key, &amp;mask, &amp;shift);</code>用于对模式解码并得到键码，掩码与偏移。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C">/ --- pattern matching mechanism ---<br>__attribute__((always_inline))<br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">pattern_decode</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str, <span class="hljs-type">int</span> len,</span><br><span class="hljs-params">    <span class="hljs-type">uint64_t</span> *key, <span class="hljs-type">uint64_t</span> *mask, <span class="hljs-type">uint64_t</span> *shift)</span> &#123;<br>  <span class="hljs-type">uint64_t</span> __key = <span class="hljs-number">0</span>, __mask = <span class="hljs-number">0</span>, __shift = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> macro(i) \</span><br><span class="hljs-meta">  <span class="hljs-keyword">if</span> ((i) &gt;= len) goto finish; \</span><br><span class="hljs-meta">  <span class="hljs-keyword">else</span> &#123; \</span><br><span class="hljs-meta">    char c = str[i]; \</span><br><span class="hljs-meta">    <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27; &#x27;</span>) &#123; \</span><br><span class="hljs-meta">      Assert(c == <span class="hljs-string">&#x27;0&#x27;</span> || c == <span class="hljs-string">&#x27;1&#x27;</span> || c == <span class="hljs-string">&#x27;?&#x27;</span>, \</span><br><span class="hljs-meta">          <span class="hljs-string">&quot;invalid character &#x27;%c&#x27; in pattern string&quot;</span>, c); \</span><br><span class="hljs-meta">      <span class="hljs-comment">/* 得到指令的键码__key与掩码__mask。 </span></span><br><span class="hljs-comment"><span class="hljs-meta">       * __shift为LSB至opcode的距离位数。</span></span><br><span class="hljs-comment"><span class="hljs-meta">       */</span></span><br>      __key  = (__key  &lt;&lt; <span class="hljs-number">1</span>) | (c == <span class="hljs-string">&#x27;1&#x27;</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>); \<br>      __mask = (__mask &lt;&lt; <span class="hljs-number">1</span>) | (c == <span class="hljs-string">&#x27;?&#x27;</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>); \<br>      __shift = (c == <span class="hljs-string">&#x27;?&#x27;</span> ? __shift + <span class="hljs-number">1</span> : <span class="hljs-number">0</span>); \<br>    &#125; \<br>  &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> macro2(i)  macro(i);   macro((i) + 1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> macro4(i)  macro2(i);  macro2((i) + 2)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> macro8(i)  macro4(i);  macro4((i) + 4)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> macro16(i) macro8(i);  macro8((i) + 8)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> macro32(i) macro16(i); macro16((i) + 16)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> macro64(i) macro32(i); macro32((i) + 32)</span><br>  <span class="hljs-comment">/* 这里使用了递归的宏展开来对每一位都进行解码 */</span><br>  macro64(<span class="hljs-number">0</span>);<br>  panic(<span class="hljs-string">&quot;pattern too long&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> macro</span><br>finish:<br><span class="hljs-comment">/*注意：这里，我们需要将键码、掩码和移位移动到正确的位置。</span><br><span class="hljs-comment">   * 移位是从 LSB 到操作码的位数，用于匹配操作码。</span><br><span class="hljs-comment">   * 密钥和掩码通过移位位向右移动。</span><br><span class="hljs-comment">   * 例如，“?????? ?????? ?????? ??? ?????? 00101 11”将被解码为</span><br><span class="hljs-comment">   * key = 0x17，mask = 0x7f，移位 = 0。</span><br><span class="hljs-comment">   */</span><br>  *key = __key &gt;&gt; __shift;<br>  *mask = __mask &gt;&gt; __shift;<br>  *shift = __shift;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到了特定指令的匹配规律，我们就可以对取到的指令进行逐一匹配了。<br></p><h3 id="3-2-指令匹配过程"><a href="#3-2-指令匹配过程" class="headerlink" title="3.2 指令匹配过程"></a>3.2 指令匹配过程</h3><p><code>if ((((uint64_t)INSTPAT_INST(s) &gt;&gt; shift) &amp; mask) == key) &#123; \</code>这条if语句对取到的指令进行匹配,<br><br>如符合，则执行<code>INSTPAT_MATCH(s, ##__VA_ARGS__); \</code>。<br><br>这个宏在decode_exec中定义。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> INSTPAT_MATCH(s, name, type, ... <span class="hljs-comment">/* execute body */</span> ) &#123; \</span><br><span class="hljs-meta">  int rd = 0; \</span><br><span class="hljs-meta">  word_t src1 = 0, src2 = 0, imm = 0; \</span><br><span class="hljs-meta">  decode_operand(s, &amp;rd, &amp;src1, &amp;src2, &amp;imm, concat(TYPE_, type)); \</span><br><span class="hljs-meta">  __VA_ARGS__ ; \</span><br><span class="hljs-meta">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-立即数译码过程"><a href="#3-3-立即数译码过程" class="headerlink" title="3.3 立即数译码过程"></a>3.3 立即数译码过程</h3><p>这里的decode_operand用来对立即数进行译码。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>  TYPE_I, TYPE_U, TYPE_S,<br>  TYPE_N, <span class="hljs-comment">// none</span><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> src1R() do &#123; *src1 = R(rs1); &#125; while (0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> src2R() do &#123; *src2 = R(rs2); &#125; while (0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> immI() do &#123; *imm = SEXT(BITS(i, 31, 20), 12); &#125; while(0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> immU() do &#123; *imm = SEXT(BITS(i, 31, 12), 20) &lt;&lt; 12; &#125; while(0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> immS() do &#123; *imm = (SEXT(BITS(i, 31, 25), 7) &lt;&lt; 5) | BITS(i, 11, 7); &#125; while(0)</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">decode_operand</span><span class="hljs-params">(Decode *s, <span class="hljs-type">int</span> *rd, <span class="hljs-type">word_t</span> *src1, <span class="hljs-type">word_t</span> *src2, <span class="hljs-type">word_t</span> *imm, <span class="hljs-type">int</span> type)</span> &#123;<br>  <span class="hljs-type">uint32_t</span> i = s-&gt;isa.inst;<br>  <span class="hljs-type">int</span> rs1 = BITS(i, <span class="hljs-number">19</span>, <span class="hljs-number">15</span>);<br>  <span class="hljs-type">int</span> rs2 = BITS(i, <span class="hljs-number">24</span>, <span class="hljs-number">20</span>);<br>  *rd     = BITS(i, <span class="hljs-number">11</span>, <span class="hljs-number">7</span>);<br>  <span class="hljs-keyword">switch</span> (type) &#123;<br>    <span class="hljs-keyword">case</span> TYPE_I: src1R();          immI(); <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> TYPE_U:                   immU(); <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> TYPE_S: src1R(); src2R(); immS(); <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> TYPE_N: <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>: panic(<span class="hljs-string">&quot;unsupported type = %d&quot;</span>, type);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中存在五个辅助宏，用于便捷的获取随机数。<br></p><h2 id="4-执行"><a href="#4-执行" class="headerlink" title="4 执行"></a>4 执行</h2><p>程序执行<code>INSTPAT(&quot;??????? ????? ????? ??? ????? 00101 11&quot;, auipc  , U, R(rd) = s-&gt;pc + imm);</code><br><br>中的<code>R(rd) = s-&gt;pc + imm</code>指令。指令执行的阶段结束之后, decode_exec()函数将会返回0, 并一路返回到exec_once()函数中。<br></p><h2 id="5-更新PC"><a href="#5-更新PC" class="headerlink" title="5 更新PC"></a>5 更新PC</h2><p>上文已经提到snpc与dnpc的区别，在程序执行时我们需要正确维护dnpc。<br><br><code>cpu.pc = s-&gt;dnpc;</code>来更新dnpc。<br></p>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>一生一芯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PA2.3-程序如何在AM上运行</title>
    <link href="/2025/02/26/PA2-3-%E7%A8%8B%E5%BA%8F%E5%A6%82%E4%BD%95%E5%9C%A8AM%E4%B8%8A%E8%BF%90%E8%A1%8C/"/>
    <url>/2025/02/26/PA2-3-%E7%A8%8B%E5%BA%8F%E5%A6%82%E4%BD%95%E5%9C%A8AM%E4%B8%8A%E8%BF%90%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<p>对整个计算机系统(NEMU,ISA,AM,运行时环境,程序)相互联系的个人理解.</p><span id="more"></span><p>本文章为一生一芯教学项目的个人理解,本人并不能保证其正确,请注意<strong>学术诚信</strong></p><h2 id="计算机是个抽象层-程序如何在计算机上运行"><a href="#计算机是个抽象层-程序如何在计算机上运行" class="headerlink" title="计算机是个抽象层:程序如何在计算机上运行"></a>计算机是个抽象层:程序如何在计算机上运行</h2><ul><li>AM为程序提供了运行时环境.</li><li>AM将NEMU的接口做了一层抽象,NEMU是底层的硬件模拟层(处理指令执行、设备交互),而AM在此之上构建软件抽象层.</li><li>AM和NEMU的运行依赖于宿主环境的运行时环境.</li></ul><h3 id="NEMU与AM如何协同工作"><a href="#NEMU与AM如何协同工作" class="headerlink" title="NEMU与AM如何协同工作"></a>NEMU与AM如何协同工作</h3><p>NEMU中进行注册内存映射操作,将一块内存映射到NEMU的端口中(MMIO),并设定回调函数,当有对这块内存读写操作时就调用回调函数.在回调函数中使用C语言的API更新对应设备.<br>AM中对内存进行读写,间接的操控设备.</p><h3 id="AM-运行时环境-程序如何协同工作"><a href="#AM-运行时环境-程序如何协同工作" class="headerlink" title="AM,运行时环境,程序如何协同工作"></a>AM,运行时环境,程序如何协同工作</h3><p>AM为程序提供了运行时环境,程序通过调用AM提供的IOE接口访问AM中的抽象寄存器并触发,而AM通过读取抽象寄存器的值对MMIO进行读写.以这种方法程序间接实现对MMIO的读写,控制设备.</p><h2 id="程序是个状态机-游戏是如何运行的"><a href="#程序是个状态机-游戏是如何运行的" class="headerlink" title="程序是个状态机:游戏是如何运行的"></a>程序是个状态机:游戏是如何运行的</h2><ul><li>初始化:ioe_init初始化IOE,video_init初始化VGA,读取timer的初始值</li><li>获取游戏运行时间(时钟)</li><li>更新游戏逻辑(TRM)</li><li>读取键盘按键(键盘):NONE-&gt;下一个状态,Esc-&gt;halt,按键-&gt;检查是否命中-&gt;下一个状态</li><li>刷新页面(VGA)</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>一生一芯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试</title>
    <link href="/2025/02/26/%E6%B5%8B%E8%AF%95/"/>
    <url>/2025/02/26/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>你好,世界!</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/26/hello-world/"/>
    <url>/2025/02/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
